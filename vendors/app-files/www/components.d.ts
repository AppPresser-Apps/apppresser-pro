/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Filter } from "./components/buddypress/activity/app-activity/app-activity";
import { Filter as Filter1 } from "./components/buddypress/groups/app-groups/app-groups";
import { Filter as Filter2 } from "./components/buddypress/members/app-members/app-members";
export namespace Components {
    interface AcfCard {
        "api": any;
        "data": any;
    }
    interface AcfDateTime {
        "data": any;
    }
    interface AcfForm {
        "data": any;
    }
    interface AcfModal {
        "api": any;
        "data": any;
    }
    interface AcfPopover {
        "data": any;
    }
    interface AcfRepeater {
        "api": any;
        "data": any;
        "filter": (filter: any) => Promise<void>;
        "reload": () => Promise<void>;
    }
    interface AcfSubrepeater {
        "api": any;
        "data": any;
    }
    interface AcfText {
        "api": any;
        "data": any;
    }
    /**
     * The ACF View component.
     * @export 
     * @class AcfView
     * @implements ComponentInterface *
     * @since 1.0.0
     * @version 1.0.0
     */
    interface AcfView {
        "data": any;
    }
    interface ActivityItem {
        "item": any;
        "options": any;
    }
    interface ActivityReplies {
        "data": any;
        "parentid": number;
    }
    interface AppActivity {
        "data": any;
        "filter"?: Filter;
        "postModal": (args?: any, data?: any) => Promise<void>;
        "props": any;
    }
    interface AppGroups {
        "data": any;
        "filter"?: Filter;
        "groupid": any;
    }
    interface AppIframe {
        "data": any;
    }
    interface AppInput {
        "api": any;
        "data": any;
        "reloadInput": (_input: any) => Promise<void>;
        "updateInput": (_input: any, value?: any) => Promise<void>;
    }
    interface AppMembers {
        "data": any;
        "filter"?: Filter;
    }
    interface AppPostForm {
        "args": any;
        "data": any;
        "item": any;
        "placeholder": string;
        "reply": boolean;
    }
    interface AppProfile {
        "data": any;
        "props": any;
        "reload": (data: any) => Promise<void>;
    }
    interface AppRoot {
        "back": () => Promise<void>;
        "emitActionEvent": (event: any, data?: any) => Promise<void>;
        "getApi": () => Promise<any[]>;
        "getTransient": (name?: any) => Promise<any>;
        "openDatabase": () => Promise<any>;
        "setApi": (data?: any) => Promise<void>;
        "setTransient": (name?: any, data?: any) => Promise<void>;
    }
    interface ApppAttachment {
    }
    interface ApppAvatar {
        "height": string;
        "width": string;
    }
    interface ApppAvatarButton {
    }
    interface ApppAvatarModal {
        "avatarUrl": any;
    }
    interface ApppEditProfile {
        "data": any;
    }
    interface AttachmentButton {
    }
    interface AttachmentModal {
        "item": any;
    }
    interface AttachmentsGrid {
    }
    interface AttachmentsScroller {
        "items": any;
    }
    interface InnerSegments {
        "data": any;
        "selected": string;
    }
    interface ModalPop {
        "direction": string;
        "modal": any;
    }
    interface PopActivity {
        "activity": any;
        "item": any;
    }
    interface PopUser {
    }
    interface ReplyItem {
        "item": any;
    }
}
export interface ActivityItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLActivityItemElement;
}
export interface AppPostFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppPostFormElement;
}
export interface ApppEditProfileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApppEditProfileElement;
}
export interface PopActivityCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopActivityElement;
}
declare global {
    interface HTMLAcfCardElement extends Components.AcfCard, HTMLStencilElement {
    }
    var HTMLAcfCardElement: {
        prototype: HTMLAcfCardElement;
        new (): HTMLAcfCardElement;
    };
    interface HTMLAcfDateTimeElement extends Components.AcfDateTime, HTMLStencilElement {
    }
    var HTMLAcfDateTimeElement: {
        prototype: HTMLAcfDateTimeElement;
        new (): HTMLAcfDateTimeElement;
    };
    interface HTMLAcfFormElement extends Components.AcfForm, HTMLStencilElement {
    }
    var HTMLAcfFormElement: {
        prototype: HTMLAcfFormElement;
        new (): HTMLAcfFormElement;
    };
    interface HTMLAcfModalElement extends Components.AcfModal, HTMLStencilElement {
    }
    var HTMLAcfModalElement: {
        prototype: HTMLAcfModalElement;
        new (): HTMLAcfModalElement;
    };
    interface HTMLAcfPopoverElement extends Components.AcfPopover, HTMLStencilElement {
    }
    var HTMLAcfPopoverElement: {
        prototype: HTMLAcfPopoverElement;
        new (): HTMLAcfPopoverElement;
    };
    interface HTMLAcfRepeaterElement extends Components.AcfRepeater, HTMLStencilElement {
    }
    var HTMLAcfRepeaterElement: {
        prototype: HTMLAcfRepeaterElement;
        new (): HTMLAcfRepeaterElement;
    };
    interface HTMLAcfSubrepeaterElement extends Components.AcfSubrepeater, HTMLStencilElement {
    }
    var HTMLAcfSubrepeaterElement: {
        prototype: HTMLAcfSubrepeaterElement;
        new (): HTMLAcfSubrepeaterElement;
    };
    interface HTMLAcfTextElement extends Components.AcfText, HTMLStencilElement {
    }
    var HTMLAcfTextElement: {
        prototype: HTMLAcfTextElement;
        new (): HTMLAcfTextElement;
    };
    /**
     * The ACF View component.
     * @export 
     * @class AcfView
     * @implements ComponentInterface *
     * @since 1.0.0
     * @version 1.0.0
     */
    interface HTMLAcfViewElement extends Components.AcfView, HTMLStencilElement {
    }
    var HTMLAcfViewElement: {
        prototype: HTMLAcfViewElement;
        new (): HTMLAcfViewElement;
    };
    interface HTMLActivityItemElement extends Components.ActivityItem, HTMLStencilElement {
    }
    var HTMLActivityItemElement: {
        prototype: HTMLActivityItemElement;
        new (): HTMLActivityItemElement;
    };
    interface HTMLActivityRepliesElement extends Components.ActivityReplies, HTMLStencilElement {
    }
    var HTMLActivityRepliesElement: {
        prototype: HTMLActivityRepliesElement;
        new (): HTMLActivityRepliesElement;
    };
    interface HTMLAppActivityElement extends Components.AppActivity, HTMLStencilElement {
    }
    var HTMLAppActivityElement: {
        prototype: HTMLAppActivityElement;
        new (): HTMLAppActivityElement;
    };
    interface HTMLAppGroupsElement extends Components.AppGroups, HTMLStencilElement {
    }
    var HTMLAppGroupsElement: {
        prototype: HTMLAppGroupsElement;
        new (): HTMLAppGroupsElement;
    };
    interface HTMLAppIframeElement extends Components.AppIframe, HTMLStencilElement {
    }
    var HTMLAppIframeElement: {
        prototype: HTMLAppIframeElement;
        new (): HTMLAppIframeElement;
    };
    interface HTMLAppInputElement extends Components.AppInput, HTMLStencilElement {
    }
    var HTMLAppInputElement: {
        prototype: HTMLAppInputElement;
        new (): HTMLAppInputElement;
    };
    interface HTMLAppMembersElement extends Components.AppMembers, HTMLStencilElement {
    }
    var HTMLAppMembersElement: {
        prototype: HTMLAppMembersElement;
        new (): HTMLAppMembersElement;
    };
    interface HTMLAppPostFormElement extends Components.AppPostForm, HTMLStencilElement {
    }
    var HTMLAppPostFormElement: {
        prototype: HTMLAppPostFormElement;
        new (): HTMLAppPostFormElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLApppAttachmentElement extends Components.ApppAttachment, HTMLStencilElement {
    }
    var HTMLApppAttachmentElement: {
        prototype: HTMLApppAttachmentElement;
        new (): HTMLApppAttachmentElement;
    };
    interface HTMLApppAvatarElement extends Components.ApppAvatar, HTMLStencilElement {
    }
    var HTMLApppAvatarElement: {
        prototype: HTMLApppAvatarElement;
        new (): HTMLApppAvatarElement;
    };
    interface HTMLApppAvatarButtonElement extends Components.ApppAvatarButton, HTMLStencilElement {
    }
    var HTMLApppAvatarButtonElement: {
        prototype: HTMLApppAvatarButtonElement;
        new (): HTMLApppAvatarButtonElement;
    };
    interface HTMLApppAvatarModalElement extends Components.ApppAvatarModal, HTMLStencilElement {
    }
    var HTMLApppAvatarModalElement: {
        prototype: HTMLApppAvatarModalElement;
        new (): HTMLApppAvatarModalElement;
    };
    interface HTMLApppEditProfileElement extends Components.ApppEditProfile, HTMLStencilElement {
    }
    var HTMLApppEditProfileElement: {
        prototype: HTMLApppEditProfileElement;
        new (): HTMLApppEditProfileElement;
    };
    interface HTMLAttachmentButtonElement extends Components.AttachmentButton, HTMLStencilElement {
    }
    var HTMLAttachmentButtonElement: {
        prototype: HTMLAttachmentButtonElement;
        new (): HTMLAttachmentButtonElement;
    };
    interface HTMLAttachmentModalElement extends Components.AttachmentModal, HTMLStencilElement {
    }
    var HTMLAttachmentModalElement: {
        prototype: HTMLAttachmentModalElement;
        new (): HTMLAttachmentModalElement;
    };
    interface HTMLAttachmentsGridElement extends Components.AttachmentsGrid, HTMLStencilElement {
    }
    var HTMLAttachmentsGridElement: {
        prototype: HTMLAttachmentsGridElement;
        new (): HTMLAttachmentsGridElement;
    };
    interface HTMLAttachmentsScrollerElement extends Components.AttachmentsScroller, HTMLStencilElement {
    }
    var HTMLAttachmentsScrollerElement: {
        prototype: HTMLAttachmentsScrollerElement;
        new (): HTMLAttachmentsScrollerElement;
    };
    interface HTMLInnerSegmentsElement extends Components.InnerSegments, HTMLStencilElement {
    }
    var HTMLInnerSegmentsElement: {
        prototype: HTMLInnerSegmentsElement;
        new (): HTMLInnerSegmentsElement;
    };
    interface HTMLModalPopElement extends Components.ModalPop, HTMLStencilElement {
    }
    var HTMLModalPopElement: {
        prototype: HTMLModalPopElement;
        new (): HTMLModalPopElement;
    };
    interface HTMLPopActivityElement extends Components.PopActivity, HTMLStencilElement {
    }
    var HTMLPopActivityElement: {
        prototype: HTMLPopActivityElement;
        new (): HTMLPopActivityElement;
    };
    interface HTMLPopUserElement extends Components.PopUser, HTMLStencilElement {
    }
    var HTMLPopUserElement: {
        prototype: HTMLPopUserElement;
        new (): HTMLPopUserElement;
    };
    interface HTMLReplyItemElement extends Components.ReplyItem, HTMLStencilElement {
    }
    var HTMLReplyItemElement: {
        prototype: HTMLReplyItemElement;
        new (): HTMLReplyItemElement;
    };
    interface HTMLElementTagNameMap {
        "acf-card": HTMLAcfCardElement;
        "acf-date-time": HTMLAcfDateTimeElement;
        "acf-form": HTMLAcfFormElement;
        "acf-modal": HTMLAcfModalElement;
        "acf-popover": HTMLAcfPopoverElement;
        "acf-repeater": HTMLAcfRepeaterElement;
        "acf-subrepeater": HTMLAcfSubrepeaterElement;
        "acf-text": HTMLAcfTextElement;
        "acf-view": HTMLAcfViewElement;
        "activity-item": HTMLActivityItemElement;
        "activity-replies": HTMLActivityRepliesElement;
        "app-activity": HTMLAppActivityElement;
        "app-groups": HTMLAppGroupsElement;
        "app-iframe": HTMLAppIframeElement;
        "app-input": HTMLAppInputElement;
        "app-members": HTMLAppMembersElement;
        "app-post-form": HTMLAppPostFormElement;
        "app-profile": HTMLAppProfileElement;
        "app-root": HTMLAppRootElement;
        "appp-attachment": HTMLApppAttachmentElement;
        "appp-avatar": HTMLApppAvatarElement;
        "appp-avatar-button": HTMLApppAvatarButtonElement;
        "appp-avatar-modal": HTMLApppAvatarModalElement;
        "appp-edit-profile": HTMLApppEditProfileElement;
        "attachment-button": HTMLAttachmentButtonElement;
        "attachment-modal": HTMLAttachmentModalElement;
        "attachments-grid": HTMLAttachmentsGridElement;
        "attachments-scroller": HTMLAttachmentsScrollerElement;
        "inner-segments": HTMLInnerSegmentsElement;
        "modal-pop": HTMLModalPopElement;
        "pop-activity": HTMLPopActivityElement;
        "pop-user": HTMLPopUserElement;
        "reply-item": HTMLReplyItemElement;
    }
}
declare namespace LocalJSX {
    interface AcfCard {
        "api"?: any;
        "data"?: any;
    }
    interface AcfDateTime {
        "data"?: any;
    }
    interface AcfForm {
        "data"?: any;
    }
    interface AcfModal {
        "api"?: any;
        "data"?: any;
    }
    interface AcfPopover {
        "data"?: any;
    }
    interface AcfRepeater {
        "api"?: any;
        "data"?: any;
    }
    interface AcfSubrepeater {
        "api"?: any;
        "data"?: any;
    }
    interface AcfText {
        "api"?: any;
        "data"?: any;
    }
    /**
     * The ACF View component.
     * @export 
     * @class AcfView
     * @implements ComponentInterface *
     * @since 1.0.0
     * @version 1.0.0
     */
    interface AcfView {
        "data"?: any;
    }
    interface ActivityItem {
        "item"?: any;
        "onFavActivityEvent"?: (event: ActivityItemCustomEvent<any>) => void;
        "options"?: any;
    }
    interface ActivityReplies {
        "data"?: any;
        "parentid"?: number;
    }
    interface AppActivity {
        "data"?: any;
        "filter"?: Filter;
        "props"?: any;
    }
    interface AppGroups {
        "data"?: any;
        "filter"?: Filter;
        "groupid"?: any;
    }
    interface AppIframe {
        "data"?: any;
    }
    interface AppInput {
        "api"?: any;
        "data"?: any;
    }
    interface AppMembers {
        "data"?: any;
        "filter"?: Filter;
    }
    interface AppPostForm {
        "args"?: any;
        "data"?: any;
        "item"?: any;
        "onActivityPost"?: (event: AppPostFormCustomEvent<any>) => void;
        "onActivityReload"?: (event: AppPostFormCustomEvent<any>) => void;
        "onActivityReply"?: (event: AppPostFormCustomEvent<any>) => void;
        "placeholder"?: string;
        "reply"?: boolean;
    }
    interface AppProfile {
        "data"?: any;
        "props"?: any;
    }
    interface AppRoot {
    }
    interface ApppAttachment {
    }
    interface ApppAvatar {
        "height"?: string;
        "width"?: string;
    }
    interface ApppAvatarButton {
    }
    interface ApppAvatarModal {
        "avatarUrl"?: any;
    }
    interface ApppEditProfile {
        "data"?: any;
        "onProfileSaved"?: (event: ApppEditProfileCustomEvent<any>) => void;
    }
    interface AttachmentButton {
    }
    interface AttachmentModal {
        "item"?: any;
    }
    interface AttachmentsGrid {
    }
    interface AttachmentsScroller {
        "items"?: any;
    }
    interface InnerSegments {
        "data"?: any;
        "selected"?: string;
    }
    interface ModalPop {
        "direction"?: string;
        "modal"?: any;
    }
    interface PopActivity {
        "activity"?: any;
        "item"?: any;
        "onDeleteActivityEvent"?: (event: PopActivityCustomEvent<any>) => void;
        "onDeleteReplyEvent"?: (event: PopActivityCustomEvent<any>) => void;
    }
    interface PopUser {
    }
    interface ReplyItem {
        "item"?: any;
    }
    interface IntrinsicElements {
        "acf-card": AcfCard;
        "acf-date-time": AcfDateTime;
        "acf-form": AcfForm;
        "acf-modal": AcfModal;
        "acf-popover": AcfPopover;
        "acf-repeater": AcfRepeater;
        "acf-subrepeater": AcfSubrepeater;
        "acf-text": AcfText;
        "acf-view": AcfView;
        "activity-item": ActivityItem;
        "activity-replies": ActivityReplies;
        "app-activity": AppActivity;
        "app-groups": AppGroups;
        "app-iframe": AppIframe;
        "app-input": AppInput;
        "app-members": AppMembers;
        "app-post-form": AppPostForm;
        "app-profile": AppProfile;
        "app-root": AppRoot;
        "appp-attachment": ApppAttachment;
        "appp-avatar": ApppAvatar;
        "appp-avatar-button": ApppAvatarButton;
        "appp-avatar-modal": ApppAvatarModal;
        "appp-edit-profile": ApppEditProfile;
        "attachment-button": AttachmentButton;
        "attachment-modal": AttachmentModal;
        "attachments-grid": AttachmentsGrid;
        "attachments-scroller": AttachmentsScroller;
        "inner-segments": InnerSegments;
        "modal-pop": ModalPop;
        "pop-activity": PopActivity;
        "pop-user": PopUser;
        "reply-item": ReplyItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "acf-card": LocalJSX.AcfCard & JSXBase.HTMLAttributes<HTMLAcfCardElement>;
            "acf-date-time": LocalJSX.AcfDateTime & JSXBase.HTMLAttributes<HTMLAcfDateTimeElement>;
            "acf-form": LocalJSX.AcfForm & JSXBase.HTMLAttributes<HTMLAcfFormElement>;
            "acf-modal": LocalJSX.AcfModal & JSXBase.HTMLAttributes<HTMLAcfModalElement>;
            "acf-popover": LocalJSX.AcfPopover & JSXBase.HTMLAttributes<HTMLAcfPopoverElement>;
            "acf-repeater": LocalJSX.AcfRepeater & JSXBase.HTMLAttributes<HTMLAcfRepeaterElement>;
            "acf-subrepeater": LocalJSX.AcfSubrepeater & JSXBase.HTMLAttributes<HTMLAcfSubrepeaterElement>;
            "acf-text": LocalJSX.AcfText & JSXBase.HTMLAttributes<HTMLAcfTextElement>;
            /**
             * The ACF View component.
             * @export 
             * @class AcfView
             * @implements ComponentInterface *
             * @since 1.0.0
             * @version 1.0.0
             */
            "acf-view": LocalJSX.AcfView & JSXBase.HTMLAttributes<HTMLAcfViewElement>;
            "activity-item": LocalJSX.ActivityItem & JSXBase.HTMLAttributes<HTMLActivityItemElement>;
            "activity-replies": LocalJSX.ActivityReplies & JSXBase.HTMLAttributes<HTMLActivityRepliesElement>;
            "app-activity": LocalJSX.AppActivity & JSXBase.HTMLAttributes<HTMLAppActivityElement>;
            "app-groups": LocalJSX.AppGroups & JSXBase.HTMLAttributes<HTMLAppGroupsElement>;
            "app-iframe": LocalJSX.AppIframe & JSXBase.HTMLAttributes<HTMLAppIframeElement>;
            "app-input": LocalJSX.AppInput & JSXBase.HTMLAttributes<HTMLAppInputElement>;
            "app-members": LocalJSX.AppMembers & JSXBase.HTMLAttributes<HTMLAppMembersElement>;
            "app-post-form": LocalJSX.AppPostForm & JSXBase.HTMLAttributes<HTMLAppPostFormElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "appp-attachment": LocalJSX.ApppAttachment & JSXBase.HTMLAttributes<HTMLApppAttachmentElement>;
            "appp-avatar": LocalJSX.ApppAvatar & JSXBase.HTMLAttributes<HTMLApppAvatarElement>;
            "appp-avatar-button": LocalJSX.ApppAvatarButton & JSXBase.HTMLAttributes<HTMLApppAvatarButtonElement>;
            "appp-avatar-modal": LocalJSX.ApppAvatarModal & JSXBase.HTMLAttributes<HTMLApppAvatarModalElement>;
            "appp-edit-profile": LocalJSX.ApppEditProfile & JSXBase.HTMLAttributes<HTMLApppEditProfileElement>;
            "attachment-button": LocalJSX.AttachmentButton & JSXBase.HTMLAttributes<HTMLAttachmentButtonElement>;
            "attachment-modal": LocalJSX.AttachmentModal & JSXBase.HTMLAttributes<HTMLAttachmentModalElement>;
            "attachments-grid": LocalJSX.AttachmentsGrid & JSXBase.HTMLAttributes<HTMLAttachmentsGridElement>;
            "attachments-scroller": LocalJSX.AttachmentsScroller & JSXBase.HTMLAttributes<HTMLAttachmentsScrollerElement>;
            "inner-segments": LocalJSX.InnerSegments & JSXBase.HTMLAttributes<HTMLInnerSegmentsElement>;
            "modal-pop": LocalJSX.ModalPop & JSXBase.HTMLAttributes<HTMLModalPopElement>;
            "pop-activity": LocalJSX.PopActivity & JSXBase.HTMLAttributes<HTMLPopActivityElement>;
            "pop-user": LocalJSX.PopUser & JSXBase.HTMLAttributes<HTMLPopUserElement>;
            "reply-item": LocalJSX.ReplyItem & JSXBase.HTMLAttributes<HTMLReplyItemElement>;
        }
    }
}
